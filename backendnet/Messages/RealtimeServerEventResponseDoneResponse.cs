using System;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Model {

  /// <summary>
  /// The response resource.
  /// </summary>
  [DataContract]
  public class RealtimeServerEventResponseDoneResponse {
    /// <summary>
    /// The unique ID of the response.
    /// </summary>
    /// <value>The unique ID of the response.</value>
    [DataMember(Name="id", EmitDefaultValue=false)]
    [JsonProperty(PropertyName = "id")]
    public string Id { get; set; }

    /// <summary>
    /// The object type, must be \"realtime.response\".
    /// </summary>
    /// <value>The object type, must be \"realtime.response\".</value>
    [DataMember(Name="object", EmitDefaultValue=false)]
    [JsonProperty(PropertyName = "object")]
    public string _Object { get; set; }

    /// <summary>
    /// The final status of the response (\"completed\", \"cancelled\", \"failed\", \"incomplete\").
    /// </summary>
    /// <value>The final status of the response (\"completed\", \"cancelled\", \"failed\", \"incomplete\").</value>
    [DataMember(Name="status", EmitDefaultValue=false)]
    [JsonProperty(PropertyName = "status")]
    public string Status { get; set; }

    /// <summary>
    /// Additional details about the status.
    /// </summary>
    /// <value>Additional details about the status.</value>
    [DataMember(Name="status_details", EmitDefaultValue=false)]
    [JsonProperty(PropertyName = "status_details")]
    public Object StatusDetails { get; set; }

    /// <summary>
    /// The list of output items generated by the response.
    /// </summary>
    /// <value>The list of output items generated by the response.</value>
    [DataMember(Name="output", EmitDefaultValue=false)]
    [JsonProperty(PropertyName = "output")]
    public List<Object> Output { get; set; }

    /// <summary>
    /// Usage statistics for the response.
    /// </summary>
    /// <value>Usage statistics for the response.</value>
    [DataMember(Name="usage", EmitDefaultValue=false)]
    [JsonProperty(PropertyName = "usage")]
    public Object Usage { get; set; }


    /// <summary>
    /// Get the string presentation of the object
    /// </summary>
    /// <returns>String presentation of the object</returns>
    public override string ToString()  {
      var sb = new StringBuilder();
      sb.Append("class RealtimeServerEventResponseDoneResponse {\n");
      sb.Append("  Id: ").Append(Id).Append("\n");
      sb.Append("  _Object: ").Append(_Object).Append("\n");
      sb.Append("  Status: ").Append(Status).Append("\n");
      sb.Append("  StatusDetails: ").Append(StatusDetails).Append("\n");
      sb.Append("  Output: ").Append(Output).Append("\n");
      sb.Append("  Usage: ").Append(Usage).Append("\n");
      sb.Append("}\n");
      return sb.ToString();
    }

    /// <summary>
    /// Get the JSON string presentation of the object
    /// </summary>
    /// <returns>JSON string presentation of the object</returns>
    public string ToJson() {
      return JsonConvert.SerializeObject(this, Formatting.Indented);
    }

}
}
